//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 

namespace VTCO.Utils.GoServices
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "WSMapApiSoap", Namespace = "http://localhost:3641/")]
    public partial class WSMapApi : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback getLocationIdByImageIdOperationCompleted;

        private System.Threading.SendOrPostCallback AddLocationOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateLocationOperationCompleted;

        private System.Threading.SendOrPostCallback AddImageLocationOperationCompleted;

        private System.Threading.SendOrPostCallback AddVideoLocationOperationCompleted;

        /// <remarks/>
        public WSMapApi()
        {
            this.Url = VTCO.Config.Global.Settings.WS_LOCATION_MAPAPI;
        }

        /// <remarks/>
        public event getLocationIdByImageIdCompletedEventHandler getLocationIdByImageIdCompleted;

        /// <remarks/>
        public event AddLocationCompletedEventHandler AddLocationCompleted;

        /// <remarks/>
        public event UpdateLocationCompletedEventHandler UpdateLocationCompleted;

        /// <remarks/>
        public event AddImageLocationCompletedEventHandler AddImageLocationCompleted;

        /// <remarks/>
        public event AddVideoLocationCompletedEventHandler AddVideoLocationCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3641/getLocationIdByImageId", RequestNamespace = "http://localhost:3641/", ResponseNamespace = "http://localhost:3641/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long getLocationIdByImageId(long imageId)
        {
            object[] results = this.Invoke("getLocationIdByImageId", new object[] {
                    imageId});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetLocationIdByImageId(long imageId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getLocationIdByImageId", new object[] {
                    imageId}, callback, asyncState);
        }

        /// <remarks/>
        public long EndgetLocationIdByImageId(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void getLocationIdByImageIdAsync(long imageId)
        {
            this.getLocationIdByImageIdAsync(imageId, null);
        }

        /// <remarks/>
        public void getLocationIdByImageIdAsync(long imageId, object userState)
        {
            if ((this.getLocationIdByImageIdOperationCompleted == null))
            {
                this.getLocationIdByImageIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLocationIdByImageIdOperationCompleted);
            }
            this.InvokeAsync("getLocationIdByImageId", new object[] {
                    imageId}, this.getLocationIdByImageIdOperationCompleted, userState);
        }

        private void OngetLocationIdByImageIdOperationCompleted(object arg)
        {
            if ((this.getLocationIdByImageIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLocationIdByImageIdCompleted(this, new getLocationIdByImageIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3641/AddLocation", RequestNamespace = "http://localhost:3641/", ResponseNamespace = "http://localhost:3641/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long AddLocation(double latitude, double longitude, string title, string description, string address, int categoryId, long userId, System.DateTime fromDate, System.DateTime toDate)
        {
            object[] results = this.Invoke("AddLocation", new object[] {
                    latitude,
                    longitude,
                    title,
                    description,
                    address,
                    categoryId,
                    userId,
                    fromDate,
                    toDate});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddLocation(double latitude, double longitude, string title, string description, string address, int categoryId, long userId, System.DateTime fromDate, System.DateTime toDate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddLocation", new object[] {
                    latitude,
                    longitude,
                    title,
                    description,
                    address,
                    categoryId,
                    userId,
                    fromDate,
                    toDate}, callback, asyncState);
        }

        /// <remarks/>
        public long EndAddLocation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void AddLocationAsync(double latitude, double longitude, string title, string description, string address, int categoryId, long userId, System.DateTime fromDate, System.DateTime toDate)
        {
            this.AddLocationAsync(latitude, longitude, title, description, address, categoryId, userId, fromDate, toDate, null);
        }

        /// <remarks/>
        public void AddLocationAsync(double latitude, double longitude, string title, string description, string address, int categoryId, long userId, System.DateTime fromDate, System.DateTime toDate, object userState)
        {
            if ((this.AddLocationOperationCompleted == null))
            {
                this.AddLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLocationOperationCompleted);
            }
            this.InvokeAsync("AddLocation", new object[] {
                    latitude,
                    longitude,
                    title,
                    description,
                    address,
                    categoryId,
                    userId,
                    fromDate,
                    toDate}, this.AddLocationOperationCompleted, userState);
        }

        private void OnAddLocationOperationCompleted(object arg)
        {
            if ((this.AddLocationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLocationCompleted(this, new AddLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3641/UpdateLocation", RequestNamespace = "http://localhost:3641/", ResponseNamespace = "http://localhost:3641/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateLocation(long locationId, double latitude, double longitude, string title, string description)
        {
            object[] results = this.Invoke("UpdateLocation", new object[] {
                    locationId,
                    latitude,
                    longitude,
                    title,
                    description});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateLocation(long locationId, double latitude, double longitude, string title, string description, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateLocation", new object[] {
                    locationId,
                    latitude,
                    longitude,
                    title,
                    description}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndUpdateLocation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void UpdateLocationAsync(long locationId, double latitude, double longitude, string title, string description)
        {
            this.UpdateLocationAsync(locationId, latitude, longitude, title, description, null);
        }

        /// <remarks/>
        public void UpdateLocationAsync(long locationId, double latitude, double longitude, string title, string description, object userState)
        {
            if ((this.UpdateLocationOperationCompleted == null))
            {
                this.UpdateLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLocationOperationCompleted);
            }
            this.InvokeAsync("UpdateLocation", new object[] {
                    locationId,
                    latitude,
                    longitude,
                    title,
                    description}, this.UpdateLocationOperationCompleted, userState);
        }

        private void OnUpdateLocationOperationCompleted(object arg)
        {
            if ((this.UpdateLocationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLocationCompleted(this, new UpdateLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3641/AddImageLocation", RequestNamespace = "http://localhost:3641/", ResponseNamespace = "http://localhost:3641/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddImageLocation(long locationId, long imageId, bool isDeepZoom)
        {
            object[] results = this.Invoke("AddImageLocation", new object[] {
                    locationId,
                    imageId,
                    isDeepZoom});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddImageLocation(long locationId, long imageId, bool isDeepZoom, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddImageLocation", new object[] {
                    locationId,
                    imageId,
                    isDeepZoom}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndAddImageLocation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void AddImageLocationAsync(long locationId, long imageId, bool isDeepZoom)
        {
            this.AddImageLocationAsync(locationId, imageId, isDeepZoom, null);
        }

        /// <remarks/>
        public void AddImageLocationAsync(long locationId, long imageId, bool isDeepZoom, object userState)
        {
            if ((this.AddImageLocationOperationCompleted == null))
            {
                this.AddImageLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddImageLocationOperationCompleted);
            }
            this.InvokeAsync("AddImageLocation", new object[] {
                    locationId,
                    imageId,
                    isDeepZoom}, this.AddImageLocationOperationCompleted, userState);
        }

        private void OnAddImageLocationOperationCompleted(object arg)
        {
            if ((this.AddImageLocationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddImageLocationCompleted(this, new AddImageLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost:3641/AddVideoLocation", RequestNamespace = "http://localhost:3641/", ResponseNamespace = "http://localhost:3641/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddVideoLocation(long locationId, long videoId, string defaultImg)
        {
            object[] results = this.Invoke("AddVideoLocation", new object[] {
                    locationId,
                    videoId,
                    defaultImg});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddVideoLocation(long locationId, long videoId, string defaultImg, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddVideoLocation", new object[] {
                    locationId,
                    videoId,
                    defaultImg}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndAddVideoLocation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void AddVideoLocationAsync(long locationId, long videoId, string defaultImg)
        {
            this.AddVideoLocationAsync(locationId, videoId, defaultImg, null);
        }

        /// <remarks/>
        public void AddVideoLocationAsync(long locationId, long videoId, string defaultImg, object userState)
        {
            if ((this.AddVideoLocationOperationCompleted == null))
            {
                this.AddVideoLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddVideoLocationOperationCompleted);
            }
            this.InvokeAsync("AddVideoLocation", new object[] {
                    locationId,
                    videoId,
                    defaultImg}, this.AddVideoLocationOperationCompleted, userState);
        }

        private void OnAddVideoLocationOperationCompleted(object arg)
        {
            if ((this.AddVideoLocationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddVideoLocationCompleted(this, new AddVideoLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void getLocationIdByImageIdCompletedEventHandler(object sender, getLocationIdByImageIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLocationIdByImageIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getLocationIdByImageIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddLocationCompletedEventHandler(object sender, AddLocationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void UpdateLocationCompletedEventHandler(object sender, UpdateLocationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddImageLocationCompletedEventHandler(object sender, AddImageLocationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddImageLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddImageLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddVideoLocationCompletedEventHandler(object sender, AddVideoLocationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddVideoLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddVideoLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}